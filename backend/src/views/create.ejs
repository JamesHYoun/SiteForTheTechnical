<!DOCTYPE html>
<html lang="en">
    <head>
        <meta charset="UTF-8" />
        <meta name="viewport" content="width=device-width, initial-scale=1.0" />
        <title>Site for Technical Minds</title>
        <link rel="stylesheet" type="text/css" href="/styles/styles.css" />
    </head>
    <body>
        <h1>Blogs</h1>
        <form action="/blogs" method="POST">
            <label for="title:">Title:</label>
            <input type="text" name="title">
            <label for="author:">Author:</label>
            <input type="text" name="author">
            <label for="content:">Content:</label>
            <input id="content" type="text" name="content">
            <button type="submit">Submit</button>
        </form>
    </body>
    <script src="https://cdn.socket.io/4.7.5/socket.io.min.js" integrity="sha384-2huaZvOR9iDzHqslqwpR87isEmrfxqyWOF7hr7BY6KG0+hVKLoEXMPUJw3ynWuhO" crossorigin="anonymous"></script>
    <script>
        // Connect to the Socket.IO server
        const content = document.getElementById('content')
        const socket = io('http://192.168.0.7:3000')
        content.addEventListener('input', event => {
            socket.emit('writing', {
                type: 'input',
                content: content.value,
                cursorPosition: content.selectionStart,
            })
        })
        // content.addEventListener('keydown', event => {
        //     socket.emit('writing', {
        //         type: 'keydown',
        //         content: content.value,
        //         cursorPosition: content.selectionStart,
        //     })
        // })
        // content.addEventListener('keyup', event => {
        //     socket.emit('writing', {
        //         type: 'keyup',
        //         content: content.value,
        //         cursorPosition: content.selectionStart
        //     })
        // })
        socket.on('writing', (data) => {
            const cursorPosition = content.selectionStart  
            const previousLength = content.value.length         
            content.value = data.content
            const currentLength = content.value.length

            // Three Issues: 
            // First. In the beginning, if i type on one screen, the cursor doesn't follow on the other.
            // Second. If I type at the start of one screen, the cursor of second screen automatically moves to end.
            // Third. There is probably issue when both cursors are at the same position.

            if (currentLength > previousLength && cursorPosition + 1 >= data.cursorPosition 
            || currentLength < previousLength && cursorPosition - 1 >= data.cursorPosition) {
                console.log('entered')
                console.log(content.value)
                // ADD LOGIC ABOUT WHETHER IT'S KEYDOWN OR KEYUP
                
                const lengthDifference = currentLength - previousLength
                content.setSelectionRange(cursorPosition + lengthDifference, cursorPosition + lengthDifference)
                
                //content.setSelectionRange(1, 1)
                console.log(content.selectionStart)
            } 
            else {
                content.setSelectionRange(cursorPosition, cursorPosition)
            }

            // if (cursorPosition >= data.cursorPosition) {
            //     // ADD LOGIC ABOUT WHETHER IT'S KEYDOWN OR KEYUP
            //     const lengthDifference = currentLength - previousLength
            //     console.log('entered')
            //     // content.setSelectionRange(cursorPosition + lengthDifference, cursorPosition + lengthDifference)
            //     console.log(content.value)
            //     content.setSelectionRange(1, 1)
            //     console.log(content.selectionStart)
            // } else {
            //     content.setSelectionRange(cursorPosition, cursorPosition)
            // }

            // if (cursorPosition > data.cursorPosition) {
            //     const lengthDifference = currentLength - previousLength
            //     console.log(currentLength)
            //     content.setSelectionRange(cursorPosition + lengthDifference, cursorPosition + lengthDifference)
            // } else if (cursorPosition == data.cursorPosition) {
            //     const lengthDifference = currentLength - previousLength + 1
            //     console.log('ENTERED')
            //     console.log(lengthDifference)
            //     content.setSelectionRange(cursorPosition + lengthDifference, cursorPosition + lengthDifference)
            //     console.log(content.selectionStart)
            // } else {
            //     content.setSelectionRange(cursorPosition, cursorPosition)
            // }

            // if (cursorPosition > data.cursorPosition) {
            //     if (data.type === 'keydown' || cursorPosition === content.value.length) {
            //         console.log("ENTERED")
            //         const currentLength = content.value.length
            //         const lengthDifference = currentLength - previousLength
            //         console.log(content.selectionStart)
            //         content.setSelectionRange(cursorPosition + lengthDifference, cursorPosition + lengthDifference)
            //     }
            // } else {
            //     content.setSelectionRange(cursorPosition, cursorPosition)
            // }

            // if (data.type === 'keydown' && cursorPosition >= data.cursorPosition) {
            //     console.log("ENTERED")
            //     console.log(content.selectionStart)
            //     content.setSelectionRange(cursorPosition + 1, cursorPosition + 1)
            // } else {
            //     content.setSelectionRange(cursorPosition, cursorPosition)
            // }
                   
        })
    </script>    
</html>